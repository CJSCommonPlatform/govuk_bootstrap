<style>
  .show-grid [class^=col-] {
    padding-top: 10px;
    padding-bottom: 10px;
    background-color: rgba(86,61,124,.15);
    border: 1px solid rgba(86,61,124,.2);
  }
  .show-grid {
    margin-bottom: 25px;
  }
</style>
<!-- Breadcrumbs -->
<div class="row">
  <div class="col-xs-12">
    <div class="breadcrumbs">
      <ol>
        <li><a href="index.html">GOV.UK Bootstrap</a></li>
        <li><a href="layout.html">Layout</a></li>
        <li>Grid System</li>
      </ol>
    </div>
  </div>
</div>
<!-- Headings -->
<div class="row">
  <div class="col-sm-8">
    <h1 class="heading-xlarge">
      <span class="heading-secondary">GOV.UK Bootstrap</span>
      Grid System
    </h1>
    <p class="lead">
      GOV.UK Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases. It includes predefined classes for easy layout options, as well as powerful mixins for generating more semantic layouts.
    </p>
  </div>
</div>
<!-- Contents -->
<div class="row">
  <div class="col-xs-12">
    <h2 class="heading-small heading-contents">Contents:</h2>
  </div>
</div>
<div class="row">
  <div class="col-sm-8">
    <ul class="list-unstyled list-contents">
      <li><a href="#introduction">Introduction</a></li>
      <li><a href="#media-queries">Media queries</a></li>
      <li><a href="#grid-options">Grid options</a></li>
      <li><a href="#stacked-to-horizontal">Example: Stacked-to-horizontal</a></li>
      <li><a href="#fluid-container">Example: Fluid container</a></li>
      <li><a href="#mobile-and-desktop">Example: Mobile and desktop</a></li>
      <li><a href="#mobile-tablet-desktop">Example: Mobile, tablet, desktop</a></li>
      <li><a href="#column-wrapping">Example: Column wrapping</a></li>
      <li><a href="#responsive-column-resets">Responsive column resets</a></li>
      <li><a href="#offsetting-columns">Offsetting columns</a></li>
      <li><a href="#nesting-columns">Nesting columns</a></li>
      <li><a href="#column-ordering">Column ordering</a></li>
      <li><a href="#sass-mixins-and-variables">Sass mixins and variables</a></li>
    </ul>
  </div>
</div>
<!-- Introduction -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="introduction">Introduction</h3>
    <p>Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works:</p>
    <ul>
      <li>Rows must be placed within a <code>.container</code> (fixed-width) or <code>.container-fluid</code> (full-width) for proper alignment and padding.</li>
      <li>Use rows to create horizontal groups of columns.</li>
      <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
      <li>Predefined grid classes like <code>.row</code> and <code>.col-xs-4</code> are available for quickly making grid layouts. Less mixins can also be used for more semantic layouts.</li>
      <li>Columns create gutters (gaps between column content) via <code>padding</code>. That padding is offset in rows for the first and last column via negative margin on <code>.row</code>s.</li>
      <li>The negative margin is why the examples below are outdented. It's so that content within grid columns is lined up with non-grid content.</li>
      <li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three <code>.col-xs-4</code>.</li>
      <li>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</li>
      <li>Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. Therefore, e.g. applying any <code>.col-md-*</code> class to an element will not only affect its styling on medium devices but also on large devices if a <code>.col-lg-*</code> class is not present.</li>
    </ul>
    <p>Look to the examples for applying these principles to your code.</p>
  </div>
</div>
<!-- Media Queries -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="media-queries">Media queries</h3>
    <p>We use the following media queries in our SASS files to create the key breakpoints in our grid system.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-scss">
        /* Extra small devices (phones, less than 768px) */
        /* No media query since this is the default in Bootstrap */

        /* Small devices (tablets, 768px and up) */
        @media (min-width: @screen-sm-min) { ... }


        /* Medium devices (desktops, 992px and up) */
        @media (min-width: @screen-md-min) { ... }

        /* Large devices (large desktops, 1200px and up) */
        @media (min-width: @screen-lg-min) { ... }
      </code>
    </pre>
  </div>
</div>
<div class="row">
  <div class="col-sm-8">
    <p>We occasionally expand on these media queries to include a max-width to limit CSS to a narrower set of devices.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-scss">
        @media (max-width: @screen-xs-max) { ... }
        @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }
        @media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }
        @media (min-width: @screen-lg-min) { ... }
      </code>
    </pre>
  </div>
</div>
<!-- Grid options -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="grid-options">Grid options</h3>
    <p>See how aspects of the Bootstrap grid system work across multiple devices with a handy table.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <div class="table-responsive">
      <table class="table table-striped">
        <thead>
        <tr>
          <th></th>
          <th> Extra small devices <small>Phones (&lt;768px)</small> </th>
          <th> Small devices <small>Tablets (≥768px)</small> </th>
          <th> Medium devices <small>Desktops (≥992px)</small> </th>
          <th> Large devices <small>Desktops (≥1200px)</small> </th>
        </tr>
        </thead>
        <tbody>
        <tr>
          <th class="text-nowrap" scope="row">Grid behavior</th>
          <td>Horizontal at all times</td> <td colspan="3">Collapsed to start, horizontal above breakpoints</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Container width</th>
          <td>None (auto)</td>
          <td>750px</td>
          <td>970px</td>
          <td>1170px</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Class prefix</th>
          <td><code>.col-xs-</code></td>
          <td><code>.col-sm-</code></td>
          <td><code>.col-md-</code></td>
          <td><code>.col-lg-</code></td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row"># of columns</th>
          <td colspan="4">12</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Column width</th>
          <td class="text-muted">Auto</td>
          <td>~62px</td>
          <td>~81px</td>
          <td>~97px</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Gutter width</th>
          <td colspan="4">30px (15px on each side of a column)</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Nestable</th>
          <td colspan="4">Yes</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Offsets</th>
          <td colspan="4">Yes</td>
        </tr>
        <tr>
          <th class="text-nowrap" scope="row">Column ordering</th>
          <td colspan="4">Yes</td>
        </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
<!-- Grid options -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="stacked-to-horizontal">Example: Stacked-to-horizontal</h3>
    <p>Using a single set of <code>.col-md-*</code> grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any <code>.row</code>.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
</div>
<div class="row show-grid">
  <div class="col-md-8">.col-md-8</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row show-grid">
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row show-grid">
  <div class="col-md-6">.col-md-6</div>
  <div class="col-md-6">.col-md-6</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
          <div class="col-md-1">.col-md-1</div>
        </div>
        <div class="row">
          <div class="col-md-8">.col-md-8</div>
          <div class="col-md-4">.col-md-4</div>
        </div>
        <div class="row">
          <div class="col-md-4">.col-md-4</div>
          <div class="col-md-4">.col-md-4</div>
          <div class="col-md-4">.col-md-4</div>
        </div>
        <div class="row">
          <div class="col-md-6">.col-md-6</div>
          <div class="col-md-6">.col-md-6</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Fluid Container -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="fluid-container">Example: Fluid container</h3>
    <p>Turn any fixed-width grid layout into a full-width layout by changing your outermost <code>.container</code> to <code>.container-fluid</code>.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="container-fluid">
          <div class="row">
            ...
          </div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Fluid Container -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="mobile-and-desktop">Example: Fluid container</h3>
    <p>Don't want your columns to simply stack in smaller devices? Use the extra small and medium device grid classes by adding <code>.col-xs-*</code> <code>.col-md-*</code> to your columns. See the example below for a better idea of how it all works.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-xs-12 col-md-8">.col-xs-12 .col-md-8</div>
  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
</div>
<div class="row show-grid">
  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
</div>
<div class="row show-grid">
  <div class="col-xs-6">.col-xs-6</div>
  <div class="col-xs-6">.col-xs-6</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <!-- Stack the columns on mobile by making one full-width and the other half-width -->
        <div class="row">
          <div class="col-xs-12 col-md-8">.col-xs-12 .col-md-8</div>
          <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
        </div>

        <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
        <div class="row">
          <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
          <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
          <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
        </div>

        <!-- Columns are always 50% wide, on mobile and desktop -->
        <div class="row">
          <div class="col-xs-6">.col-xs-6</div>
          <div class="col-xs-6">.col-xs-6</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Mobile, tablet, desktop -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="mobile-tablet-desktop">Example: Mobile, tablet, desktop</h3>
    <p>Build on the previous example by creating even more dynamic and powerful layouts with tablet <code>.col-sm-*</code> classes.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-xs-12 col-sm-6 col-md-8">.col-xs-12 .col-sm-6 .col-md-8</div>
  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
</div>
<div class="row show-grid">
  <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
  <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
  <div class="clearfix visible-xs-block"></div>
  <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-xs-12 col-sm-6 col-md-8">.col-xs-12 .col-sm-6 .col-md-8</div>
          <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
        </div>
        <div class="row">
          <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
          <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
          <!-- Optional: clear the XS cols if their content doesn't match in height -->
          <div class="clearfix visible-xs-block"></div>
          <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Example: Column wrapping -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="column-wrapping">Example: Example: Column wrapping</h3>
    <p>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-xs-9">.col-xs-9</div>
  <div class="col-xs-4">.col-xs-4<br>Since 9 + 4 = 13 &gt; 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.</div>
  <div class="col-xs-6">.col-xs-6<br>Subsequent columns continue along the new line.</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-xs-9">.col-xs-9</div>
          <div class="col-xs-4">.col-xs-4<br>Since 9 + 4 = 13 &gt; 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.</div>
          <div class="col-xs-6">.col-xs-6<br>Subsequent columns continue along the new line.</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Responsive column resets -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="responsive-column-resets">Responsive column resets</h3>
    <p>With the four tiers of grids available you're bound to run into issues where, at certain breakpoints, your columns don't clear quite right as one is taller than the other. To fix that, use a combination of a <code>.clearfix</code> and our <a href="#tbc">responsive utility classes</a>.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-xs-6 col-sm-3"> .col-xs-6 .col-sm-3 <br> Resize your viewport or check it out on your phone for an example. </div>
  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
  <div class="clearfix visible-xs-block"></div>
  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
          <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>

          <!-- Add the extra clearfix for only the required viewport -->
          <div class="clearfix visible-xs-block"></div>

          <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
          <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Offsetting columns -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="offsetting-columns">Offsetting columns</h3>
    <p>Move columns to the right using <code>.col-md-offset-*</code> classes. These classes increase the left margin of a column by <code>*</code> columns. For example, <code>.col-md-offset-4</code> moves <code>.col-md-4</code> over four columns.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4 col-md-offset-4">.col-md-4 .col-md-offset-4</div>
</div>
<div class="row show-grid">
  <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
  <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
</div>
<div class="row show-grid">
  <div class="col-md-6 col-md-offset-3">.col-md-6 .col-md-offset-3</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-md-4">.col-md-4</div>
          <div class="col-md-4 col-md-offset-4">.col-md-4 .col-md-offset-4</div>
        </div>
        <div class="row">
          <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
          <div class="col-md-3 col-md-offset-3">.col-md-3 .col-md-offset-3</div>
        </div>
        <div class="row">
          <div class="col-md-6 col-md-offset-3">.col-md-6 .col-md-offset-3</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<div class="row">
  <div class="col-sm-8">
    <p>You can also override offsets from lower grid tiers with <code>.col-*-offset-0</code> classes.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-xs-6 col-sm-4">
          </div>
          <div class="col-xs-6 col-sm-4">
          </div>
          <div class="col-xs-6 col-xs-offset-3 col-sm-4 col-sm-offset-0">
          </div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Nesting columns -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="nesting-columns">Nesting columns</h3>
    <p>To nest your content with the default grid, add a new <code>.row</code> and set of <code>.col-sm-*</code> columns within an existing <code>.col-sm-*</code> column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-sm-9"> Level 1: .col-sm-9
    <div class="row show-grid">
      <div class="col-xs-8 col-sm-6"> Level 2: .col-xs-8 .col-sm-6
      </div>
      <div class="col-xs-4 col-sm-6"> Level 2: .col-xs-4 .col-sm-6
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-sm-9">
            Level 1: .col-sm-9
            <div class="row">
              <div class="col-xs-8 col-sm-6">
                Level 2: .col-xs-8 .col-sm-6
              </div>
              <div class="col-xs-4 col-sm-6">
                Level 2: .col-xs-4 .col-sm-6
              </div>
            </div>
          </div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Column ordering -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="column-ordering">Column ordering</h3>
    <p>Easily change the order of our built-in grid columns with <code>.col-md-push-*</code> and <code>.col-md-pull-*</code> modifier classes.</p>
  </div>
</div>
<div class="row show-grid">
  <div class="col-md-9 col-md-push-3">.col-md-9 .col-md-push-3</div>
  <div class="col-md-3 col-md-pull-9">.col-md-3 .col-md-pull-9</div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="row">
          <div class="col-md-9 col-md-push-3">.col-md-9 .col-md-push-3</div>
          <div class="col-md-3 col-md-pull-9">.col-md-3 .col-md-pull-9</div>
        </div>
      </code>
    </pre>
  </div>
</div>
<!-- Sass mixins and variables -->
<div class="row">
  <div class="col-sm-8">
    <h3 class="heading-medium" id="sass-mixins-and-variables">Sass mixins and variables</h3>
    <p>In addition to <a href="#stacked-to-horizontal">prebuilt grid classes</a> for fast layouts, Bootstrap includes Less variables and mixins for quickly generating your own simple, semantic layouts.</p>
    <h4 class="heading-small">Variables</h4>
    <p>Variables determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-sass">
        @grid-columns:              12;
        @grid-gutter-width:         30px;
        @grid-float-breakpoint:     768px;
      </code>
    </pre>
  </div>
</div>
<div class="row">
  <div class="col-sm-8">
    <h4 class="heading-small">Mixins</h4>
    <p>Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-sass">
        // Creates a wrapper for a series of columns
        .make-row(@gutter: @grid-gutter-width) {
          // Then clear the floated columns
          .clearfix();

          @media (min-width: @screen-sm-min) {
            margin-left:  (@gutter / -2);
            margin-right: (@gutter / -2);
          }

          // Negative margin nested rows out to align the content of columns
          .row {
            margin-left:  (@gutter / -2);
            margin-right: (@gutter / -2);
          }
        }

        // Generate the extra small columns
        .make-xs-column(@columns; @gutter: @grid-gutter-width) {
          position: relative;
          // Prevent columns from collapsing when empty
          min-height: 1px;
          // Inner gutter via padding
          padding-left:  (@gutter / 2);
          padding-right: (@gutter / 2);

          // Calculate width based on number of columns available
          @media (min-width: @grid-float-breakpoint) {
            float: left;
            width: percentage((@columns / @grid-columns));
          }
        }

        // Generate the small columns
        .make-sm-column(@columns; @gutter: @grid-gutter-width) {
          position: relative;
          // Prevent columns from collapsing when empty
          min-height: 1px;
          // Inner gutter via padding
          padding-left:  (@gutter / 2);
          padding-right: (@gutter / 2);

          // Calculate width based on number of columns available
          @media (min-width: @screen-sm-min) {
            float: left;
            width: percentage((@columns / @grid-columns));
          }
        }

        // Generate the small column offsets
        .make-sm-column-offset(@columns) {
          @media (min-width: @screen-sm-min) {
            margin-left: percentage((@columns / @grid-columns));
          }
        }
        .make-sm-column-push(@columns) {
          @media (min-width: @screen-sm-min) {
            left: percentage((@columns / @grid-columns));
          }
        }
        .make-sm-column-pull(@columns) {
          @media (min-width: @screen-sm-min) {
            right: percentage((@columns / @grid-columns));
          }
        }

        // Generate the medium columns
        .make-md-column(@columns; @gutter: @grid-gutter-width) {
          position: relative;
          // Prevent columns from collapsing when empty
          min-height: 1px;
          // Inner gutter via padding
          padding-left:  (@gutter / 2);
          padding-right: (@gutter / 2);

          // Calculate width based on number of columns available
          @media (min-width: @screen-md-min) {
            float: left;
            width: percentage((@columns / @grid-columns));
          }
        }

        // Generate the medium column offsets
          .make-md-column-offset(@columns) {
            @media (min-width: @screen-md-min) {
            margin-left: percentage((@columns / @grid-columns));
          }
        }
        .make-md-column-push(@columns) {
          @media (min-width: @screen-md-min) {
            left: percentage((@columns / @grid-columns));
          }
        }
        .make-md-column-pull(@columns) {
          @media (min-width: @screen-md-min) {
            right: percentage((@columns / @grid-columns));
          }
        }

        // Generate the large columns
        .make-lg-column(@columns; @gutter: @grid-gutter-width) {
          position: relative;
          // Prevent columns from collapsing when empty
          min-height: 1px;
          // Inner gutter via padding
          padding-left:  (@gutter / 2);
          padding-right: (@gutter / 2);

          // Calculate width based on number of columns available
          @media (min-width: @screen-lg-min) {
            float: left;
            width: percentage((@columns / @grid-columns));
          }
        }

        // Generate the large column offsets
        .make-lg-column-offset(@columns) {
          @media (min-width: @screen-lg-min) {
            margin-left: percentage((@columns / @grid-columns));
          }
        }
        .make-lg-column-push(@columns) {
          @media (min-width: @screen-lg-min) {
            left: percentage((@columns / @grid-columns));
          }
        }
        .make-lg-column-pull(@columns) {
          @media (min-width: @screen-lg-min) {
            right: percentage((@columns / @grid-columns));
          }
        }
      </code>
    </pre>
  </div>
</div>
<div class="row">
  <div class="col-sm-8">
    <h4 class="heading-small">Example usage</h4>
    <p>You can modify the variables to your own custom values, or just use the mixins with their default values. Here's an example of using the default settings to create a two-column layout with a gap between.</p>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-sass">
        .wrapper {
          .make-row();
        }
        .content-main {
          .make-lg-column(8);
        }
        .content-secondary {
          .make-lg-column(3);
          .make-lg-column-offset(1);
        }
      </code>
    </pre>
  </div>
</div>
<div class="row">
  <div class="col-xs-12">
    <pre>
      <code class="language-markup">
        <div class="wrapper">
          <div class="content-main">...</div>
          <div class="content-secondary">...</div>
        </div>
      </code>
    </pre>
  </div>
</div>
